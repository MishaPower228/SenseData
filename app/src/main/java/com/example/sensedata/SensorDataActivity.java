package com.example.sensedata;

import android.app.Dialog;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.sensedata.adapter.RecommendationHistoryAdapter;
import com.example.sensedata.model.RecommendationHistoryDto;
import com.example.sensedata.model.RecommendationsDto;
import com.example.sensedata.model.SaveLatestRecommendationDto;
import com.example.sensedata.model.SensorDataDTO;
import com.example.sensedata.network.ApiClientMain;
import com.example.sensedata.network.SensorDataApiService;
import com.example.sensedata.network.SettingsApiService;
import com.google.android.material.appbar.MaterialToolbar;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class SensorDataActivity extends ImmersiveActivity {

    public static final String EXTRA_CHIP_ID   = "extra_chip_id";
    public static final String EXTRA_ROOM_NAME = "extra_room_name";

    private static final long REFRESH_INTERVAL_MS = 5 * 60 * 1000L; // 5 —Ö–≤

    private String chipId;
    private String roomName;

    private ProgressBar progress;
    private MaterialToolbar tb;

    // –ü–æ–∫–∞–∑–Ω–∏–∫–∏
    private TextView tvTemp, tvHumi, tvPressure, tvAltitude,
            tvTempBme, tvHumiBme, tvGas, tvLight,
            tvMq2, tvMq2P, tvLightA, tvLightAP;

    // –ü–æ—Ä–∞–¥–∏
    private TextView tvAdvice;
    private SettingsApiService settingsApi;
    private volatile boolean adviceLoading = false;

    // –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    private final Handler handler = new Handler(Looper.getMainLooper());
    private final Runnable refreshRunnable = new Runnable() {
        @Override public void run() {
            loadLatest(false);          // –±–µ–∑ —Å–ø—ñ–Ω–µ—Ä–∞
            loadRecommendations(false); // –±–µ–∑ –∑–∞–ø–∏—Å—É –≤ —ñ—Å—Ç–æ—Ä—ñ—é
            handler.postDelayed(this, REFRESH_INTERVAL_MS);
        }
    };
    private volatile boolean isLoading = false;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_sensor_data);

        chipId   = getIntent().getStringExtra(EXTRA_CHIP_ID);
        roomName = getIntent().getStringExtra(EXTRA_ROOM_NAME);

        // --- Toolbar ---
        tb = findViewById(R.id.toolbar);
        tb.setNavigationOnClickListener(v -> getOnBackPressedDispatcher().onBackPressed());
        tb.setTitle(makeTitle(roomName, chipId));
        // --- /Toolbar ---

        progress = findViewById(R.id.progress);

        // init views
        tvTemp     = findViewById(R.id.tvTemp);
        tvHumi     = findViewById(R.id.tvHumi);
        tvPressure = findViewById(R.id.tvPressure);
        tvAltitude = findViewById(R.id.tvAltitude);
        tvTempBme  = findViewById(R.id.tvTempBme);
        tvHumiBme  = findViewById(R.id.tvHumiBme);
        tvGas      = findViewById(R.id.tvGas);
        tvLight    = findViewById(R.id.tvLight);
        tvMq2      = findViewById(R.id.tvMq2);
        tvMq2P     = findViewById(R.id.tvMq2P);
        tvLightA   = findViewById(R.id.tvLightA);
        tvLightAP  = findViewById(R.id.tvLightAP);

        // –ø–æ—Ä–∞–¥–∏ (–º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞–Ω–æ —É layout –Ω–∏–∂—á–µ —Å–ø–∏—Å–∫—É –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤)
        tvAdvice   = findViewById(R.id.tvAdvice);

        // retrofit API –¥–ª—è –ø–æ—Ä–∞–¥
        settingsApi = ApiClientMain
                .getClient(getApplicationContext())
                .create(SettingsApiService.class);

        // –¥–æ–≤–≥–∏–π —Ç–∞–ø –ø–æ –±–ª–æ–∫—É –ø–æ—Ä–∞–¥ -> —ñ—Å—Ç–æ—Ä—ñ—è
        tvAdvice.setOnLongClickListener(v -> {
            showAdviceHistoryDialog();
            return true;
        });

        // –ø–µ—Ä—à–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ‚Äî –∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        loadLatest(true);
    }

    @Override
    protected void onStart() {
        super.onStart();
        handler.removeCallbacks(refreshRunnable);
        handler.postDelayed(refreshRunnable, REFRESH_INTERVAL_MS);
    }

    @Override
    protected void onStop() {
        super.onStop();
        handler.removeCallbacks(refreshRunnable);
    }

    private void loadLatest() { loadLatest(true); }

    private void loadLatest(boolean showProgress) {
        if (isLoading) return;
        isLoading = true;

        if (showProgress) progress.setVisibility(View.VISIBLE);

        SensorDataApiService api = ApiClientMain
                .getClient(getApplicationContext())
                .create(SensorDataApiService.class);

        api.getLatest(chipId).enqueue(new Callback<SensorDataDTO>() {
            @Override public void onResponse(Call<SensorDataDTO> call, Response<SensorDataDTO> resp) {
                isLoading = false;
                progress.setVisibility(View.GONE);

                if (!resp.isSuccessful() || resp.body() == null) {
                    if (showProgress) {
                        Toast.makeText(SensorDataActivity.this, "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö", Toast.LENGTH_SHORT).show();
                    }
                    // –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î ‚Äî –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏–º–æ –ø–æ—Ä–∞–¥–∏, –≤–æ–Ω–∏ —Ä–∞—Ö—É—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ
                    loadRecommendations(false);
                    return;
                }
                SensorDataDTO d = resp.body();

                // –æ–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, —è–∫—â–æ –∑ –±–µ–∫–µ–Ω–¥–∞ –ø—Ä–∏—ó—Ö–∞–≤ roomName
                if ((roomName == null || roomName.isEmpty()) && d.roomName != null && !d.roomName.isEmpty()) {
                    roomName = d.roomName;
                }
                tb.setTitle(makeTitle(roomName, chipId));

                // –ø–æ–∫–∞–∑–Ω–∏–∫–∏
                tvTemp.setText("üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + f(d.temperatureDht, "¬∞C"));
                tvHumi.setText("üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: " + f(d.humidityDht, "%"));
                tvPressure.setText("üß≠ –¢–∏—Å–∫: " + f(d.pressure, "hPa"));
                tvAltitude.setText("‚õ∞ –í–∏—Å–æ—Ç–∞: " + f(d.altitude, "m"));
                tvTempBme.setText("üå° T(BME): " + f(d.temperatureBme, "¬∞C"));
                tvHumiBme.setText("üíß H(BME): " + f(d.humidityBme, "%"));
                tvGas.setText("üî• –ì–∞–∑: " + b(d.gasDetected));
                tvLight.setText("üí° –°–≤—ñ—Ç–ª–æ: " + b(d.light));
                tvMq2.setText("üß™ MQ2: " + i(d.mq2Analog));
                tvMq2P.setText("üß™ MQ2, %: " + f(d.mq2AnalogPercent, "%"));
                tvLightA.setText("üîÜ –û—Å–≤—ñ—Ç–ª–µ–Ω—ñ—Å—Ç—å (A): " + i(d.lightAnalog));
                tvLightAP.setText("üîÜ –û—Å–≤—ñ—Ç–ª–µ–Ω—ñ—Å—Ç—å, %: " + f(d.lightAnalogPercent, "%"));

                // –ø–æ—Ä–∞–¥–∏ (—ñ –æ–¥—Ä–∞–∑—É –∑–±–µ—Ä–µ–∂–µ–º–æ —É —ñ—Å—Ç–æ—Ä—ñ—é, —è–∫—â–æ –≤–æ–Ω–∏ —î)
                loadRecommendations(true);
            }

            @Override public void onFailure(Call<SensorDataDTO> call, Throwable t) {
                isLoading = false;
                progress.setVisibility(View.GONE);
                if (showProgress) {
                    Toast.makeText(SensorDataActivity.this, "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", Toast.LENGTH_SHORT).show();
                }
                loadRecommendations(false);
            }
        });
    }

    // ----------- –ü–û–†–ê–î–ò -----------

    private void loadRecommendations(boolean saveIfAny) {
        if (adviceLoading) return;
        adviceLoading = true;

        settingsApi.getLatestAdvice(chipId).enqueue(new Callback<RecommendationsDto>() {
            @Override public void onResponse(Call<RecommendationsDto> c, Response<RecommendationsDto> r) {
                adviceLoading = false;
                if (!r.isSuccessful() || r.body()==null) {
                    tvAdvice.setText("‚Äî");
                    return;
                }
                List<String> adv = r.body().advice;
                if (adv == null || adv.isEmpty()) {
                    tvAdvice.setText("–í—Å–µ –≤ –Ω–æ—Ä–º—ñ");
                    return;
                }
                tvAdvice.setText("‚Ä¢ " + TextUtils.join("\n‚Ä¢ ", adv));

                if (saveIfAny) {
                    // 204 No Content –æ–∑–Ω–∞—á–∞—î: –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ (–ø–æ—Ä–∞–¥ –Ω–µ–º–∞—î) ‚Äî —Ü–µ –æ–∫
                    settingsApi.saveLatestAdvice(chipId).enqueue(new Callback<SaveLatestRecommendationDto>() {
                        @Override public void onResponse(Call<SaveLatestRecommendationDto> c2, Response<SaveLatestRecommendationDto> r2) { /* no-op */ }
                        @Override public void onFailure(Call<SaveLatestRecommendationDto> c2, Throwable t) { /* no-op */ }
                    });
                }
            }
            @Override public void onFailure(Call<RecommendationsDto> c, Throwable t) {
                adviceLoading = false;
                // —Ç–∏—Ö–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
            }
        });
    }

    private void showAdviceHistoryDialog() {
        final Dialog dialog = new Dialog(this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setContentView(R.layout.dialog_recommendations_history);

        // –ø–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–∏–±—Ä–∞—Ç–∏ –±—É–¥—å-—è–∫–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è/–±–µ–∫–≥—Ä–∞—É–Ω–¥ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        if (dialog.getWindow() != null) {
            Window w = dialog.getWindow();
            w.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
            w.clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
            w.setDimAmount(0f);
        }

        // view –∑ –ª–µ–π–∞—É—Ç–∞
        RecyclerView rv = dialog.findViewById(R.id.rvAdviceHistory);
        TextView tvEmpty = dialog.findViewById(R.id.tvEmpty);
        Button btnClose = dialog.findViewById(R.id.btnClose);

        // —Å–ø–∏—Å–æ–∫
        rv.setLayoutManager(new LinearLayoutManager(this));
        RecommendationHistoryAdapter adapter = new RecommendationHistoryAdapter();
        rv.setAdapter(adapter);

        // –∫–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä–∏—Ç–∏"
        btnClose.setOnClickListener(v -> dialog.dismiss());

        dialog.show();

        // –∑–∞–¥–∞—Ç–∏ —à–∏—Ä–∏–Ω—É ~90% –µ–∫—Ä–∞–Ω–∞ (—â–æ–± –Ω–µ –±—É–ª–æ –≤—É–∑—å–∫–æ—ó –∫–æ–ª–æ–Ω–∫–∏)
        if (dialog.getWindow() != null) {
            int width = (int) (getResources().getDisplayMetrics().widthPixels * 0.90f);
            dialog.getWindow().setLayout(width, ViewGroup.LayoutParams.WRAP_CONTENT);
        }

        // –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
        settingsApi.getAdviceHistory(chipId, 30).enqueue(new Callback<List<RecommendationHistoryDto>>() {
            @Override
            public void onResponse(Call<List<RecommendationHistoryDto>> call,
                                   Response<List<RecommendationHistoryDto>> resp) {
                List<RecommendationHistoryDto> data =
                        resp.isSuccessful() ? resp.body() : null;

                if (data == null || data.isEmpty()) {
                    tvEmpty.setVisibility(View.VISIBLE);
                    adapter.submit(new ArrayList<>());
                } else {
                    tvEmpty.setVisibility(View.GONE);
                    adapter.submit(data);
                }
            }

            @Override
            public void onFailure(Call<List<RecommendationHistoryDto>> call, Throwable t) {
                tvEmpty.setVisibility(View.VISIBLE);
            }
        });
    }

    // ----------- –£—Ç–∏–ª—ñ—Ç–∏ -----------

    private String makeTitle(String roomName, String chipId) {
        String rn = (roomName == null || roomName.isEmpty()) ? "–î–∞–Ω—ñ —Å–µ–Ω—Å–æ—Ä—ñ–≤" : roomName;
        return rn + (chipId == null || chipId.isEmpty() ? "" : " (" + chipId + ")");
    }

    private String f(Float v, String unit) {
        return v == null ? "‚Äî" : String.format(Locale.getDefault(), "%.1f %s", v, unit);
    }
    private String i(Integer v) { return v == null ? "‚Äî" : String.valueOf(v); }
    private String b(Boolean v) { return v == null ? "‚Äî" : (v ? "–¢–∞–∫" : "–ù—ñ"); }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == android.R.id.home) { finish(); return true; }
        return super.onOptionsItemSelected(item);
    }
}
